{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/myWork/personal/AI/first/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:8000/api/v1/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUser(data.user);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        localStorage.setItem('accessToken', data.access_token);\n        localStorage.setItem('refreshToken', data.refresh_token);\n        localStorage.setItem('tokenExpiresAt', Date.now() + data.expires_in * 1000);\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          error: data.detail || 'Login failed'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Network error. Please try again.'\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      console.log('Starting registration process...');\n      const response = await fetch('http://localhost:8000/api/v1/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: userData.name,\n          email: userData.email,\n          password: userData.password,\n          role: 'user',\n          company: userData.company || null\n        })\n      });\n      const data = await response.json();\n      console.log('Registration response:', response.status, data);\n      if (response.ok) {\n        console.log('Registration successful, attempting auto-login...');\n        // After successful registration, automatically log the user in\n        const loginResponse = await fetch('http://localhost:8000/api/v1/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: userData.email,\n            password: userData.password\n          })\n        });\n        const loginData = await loginResponse.json();\n        console.log('Auto-login response:', loginResponse.status, loginData);\n        if (loginResponse.ok) {\n          // Set user data and tokens\n          setUser(loginData.user);\n          localStorage.setItem('user', JSON.stringify(loginData.user));\n          localStorage.setItem('accessToken', loginData.access_token);\n          localStorage.setItem('refreshToken', loginData.refresh_token);\n          localStorage.setItem('tokenExpiresAt', Date.now() + loginData.expires_in * 1000);\n          console.log('Auto-login successful, tokens stored');\n          return {\n            success: true,\n            message: 'Registration successful! You are now logged in.'\n          };\n        } else {\n          // Registration succeeded but auto-login failed\n          console.log('Auto-login failed, user needs to login manually');\n          setUser(data);\n          localStorage.setItem('user', JSON.stringify(data));\n          return {\n            success: true,\n            message: 'Registration successful! Please log in to continue.'\n          };\n        }\n      } else {\n        console.log('Registration failed:', data.detail);\n        return {\n          success: false,\n          error: data.detail || 'Registration failed'\n        };\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: 'Network error. Please try again.'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('tokenExpiresAt');\n  };\n  const forgotPassword = async email => {\n    try {\n      const response = await fetch('http://localhost:8000/api/v1/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.detail || 'Password reset request failed'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Network error. Please try again.'\n      };\n    }\n  };\n  const refreshAccessToken = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await fetch('http://localhost:8000/api/v1/auth/refresh', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refresh_token: refreshToken\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('accessToken', data.access_token);\n        localStorage.setItem('tokenExpiresAt', Date.now() + data.expires_in * 1000);\n        return {\n          success: true,\n          accessToken: data.access_token\n        };\n      } else {\n        // Refresh token is invalid, logout user\n        logout();\n        return {\n          success: false,\n          error: 'Session expired. Please login again.'\n        };\n      }\n    } catch (error) {\n      logout();\n      return {\n        success: false,\n        error: 'Failed to refresh token.'\n      };\n    }\n  };\n  const getValidAccessToken = async () => {\n    const accessToken = localStorage.getItem('accessToken');\n    const expiresAt = localStorage.getItem('tokenExpiresAt');\n    if (!accessToken || !expiresAt) {\n      return null;\n    }\n\n    // Check if token is expired (with 30 second buffer)\n    if (Date.now() > expiresAt - 30000) {\n      const result = await refreshAccessToken();\n      return result.success ? result.accessToken : null;\n    }\n    return accessToken;\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    forgotPassword,\n    refreshAccessToken,\n    getValidAccessToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","login","email","password","response","fetch","method","headers","body","stringify","data","json","ok","setItem","access_token","refresh_token","Date","now","expires_in","success","error","detail","register","userData","console","log","name","role","company","status","loginResponse","loginData","message","logout","removeItem","forgotPassword","refreshAccessToken","refreshToken","accessToken","getValidAccessToken","expiresAt","result","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macbookpro/Desktop/myWork/personal/AI/first/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:8000/api/v1/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setUser(data.user);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        localStorage.setItem('accessToken', data.access_token);\n        localStorage.setItem('refreshToken', data.refresh_token);\n        localStorage.setItem('tokenExpiresAt', Date.now() + (data.expires_in * 1000));\n        return { success: true };\n      } else {\n        return { success: false, error: data.detail || 'Login failed' };\n      }\n    } catch (error) {\n      return { success: false, error: 'Network error. Please try again.' };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      console.log('Starting registration process...');\n      const response = await fetch('http://localhost:8000/api/v1/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: userData.name,\n          email: userData.email,\n          password: userData.password,\n          role: 'user',\n          company: userData.company || null\n        }),\n      });\n\n      const data = await response.json();\n      console.log('Registration response:', response.status, data);\n\n      if (response.ok) {\n        console.log('Registration successful, attempting auto-login...');\n        // After successful registration, automatically log the user in\n        const loginResponse = await fetch('http://localhost:8000/api/v1/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ \n            email: userData.email, \n            password: userData.password \n          }),\n        });\n\n        const loginData = await loginResponse.json();\n        console.log('Auto-login response:', loginResponse.status, loginData);\n\n        if (loginResponse.ok) {\n          // Set user data and tokens\n          setUser(loginData.user);\n          localStorage.setItem('user', JSON.stringify(loginData.user));\n          localStorage.setItem('accessToken', loginData.access_token);\n          localStorage.setItem('refreshToken', loginData.refresh_token);\n          localStorage.setItem('tokenExpiresAt', Date.now() + (loginData.expires_in * 1000));\n          console.log('Auto-login successful, tokens stored');\n          return { success: true, message: 'Registration successful! You are now logged in.' };\n        } else {\n          // Registration succeeded but auto-login failed\n          console.log('Auto-login failed, user needs to login manually');\n          setUser(data);\n          localStorage.setItem('user', JSON.stringify(data));\n          return { success: true, message: 'Registration successful! Please log in to continue.' };\n        }\n      } else {\n        console.log('Registration failed:', data.detail);\n        return { success: false, error: data.detail || 'Registration failed' };\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      return { success: false, error: 'Network error. Please try again.' };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('tokenExpiresAt');\n  };\n\n  const forgotPassword = async (email) => {\n    try {\n      const response = await fetch('http://localhost:8000/api/v1/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return { success: true, message: data.message };\n      } else {\n        return { success: false, error: data.detail || 'Password reset request failed' };\n      }\n    } catch (error) {\n      return { success: false, error: 'Network error. Please try again.' };\n    }\n  };\n\n  const refreshAccessToken = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      const response = await fetch('http://localhost:8000/api/v1/auth/refresh', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ refresh_token: refreshToken }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        localStorage.setItem('accessToken', data.access_token);\n        localStorage.setItem('tokenExpiresAt', Date.now() + (data.expires_in * 1000));\n        return { success: true, accessToken: data.access_token };\n      } else {\n        // Refresh token is invalid, logout user\n        logout();\n        return { success: false, error: 'Session expired. Please login again.' };\n      }\n    } catch (error) {\n      logout();\n      return { success: false, error: 'Failed to refresh token.' };\n    }\n  };\n\n  const getValidAccessToken = async () => {\n    const accessToken = localStorage.getItem('accessToken');\n    const expiresAt = localStorage.getItem('tokenExpiresAt');\n    \n    if (!accessToken || !expiresAt) {\n      return null;\n    }\n\n    // Check if token is expired (with 30 second buffer)\n    if (Date.now() > expiresAt - 30000) {\n      const result = await refreshAccessToken();\n      return result.success ? result.accessToken : null;\n    }\n\n    return accessToken;\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    forgotPassword,\n    refreshAccessToken,\n    getValidAccessToken,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}